@startuml
'https://plantuml.com/sequence-diagram

actor User as User
participant Browser as Browser
participant Server as Server
database Redis as Redis
database Database as Database
queue WebSocket as WebSocket

newpage Start Quiz
User -> Browser: Start a quiz
Browser -> Server: Request to start a quiz
group quiz_session existence check
    Server -> Database: get quiz_session record
    return quiz_session record
end
alt user is not a quiz session
    Server -> Database: Store quiz_session record
    Server -> Redis: Cache quiz_session record
    Server -> Database: Store activity record
    Server -> WebSocket: Dispatch QuizActivityEvent
    Server -> Browser: Response to start a quiz
    Browser -> User: Display quiz session
else User has a quiz session or not assigned
    Server -> Browser: Response forbidden with message
    Browser -> User: Display forbidden message
end

newpage Continue Quiz
User -> Browser: Continue quiz / open a question page
Browser -> Server: Request to continue quiz
group user quiz_session check
    Server -> Redis: Get quiz_session record
    alt
        Redis -> Server: Return quiz_session record
    else quiz_session record does not exists in redis
        Redis -> Server: Return null
        Server -> Database: Get quiz_session record
        alt
        Database -> Server: Return quiz_session record
        Server -> Redis: Cache quiz_session record
        else quiz_session record does not exists in database
            Database -> Server: Return null
            Server -> Browser: Response not found
            Browser -> User: Display user is not in the quiz
        end
    end
end
alt
    Server -> Browser: Response with question data
    Browser -> User: Display question
else quiz_session is timeout
    Server -> Browser: Response redirect to complete quiz page
    Browser -> User: Display complete quiz page
end

newpage User Answering Question
User -> Browser: Select question's option
Browser -> Server: Request set answer
group user quiz_session check
    Server -> Redis: Get quiz_session record
    alt
        Redis -> Server: Return quiz_session record
    else quiz_session record does not exists in redis
        Redis -> Server: Return null
        Server -> Database: Get quiz_session record
        alt
            Database -> Server: Return quiz_session record
            Server -> Redis: Cache quiz_session record
        else quiz_session record does not exists in database
            Database -> Server: Return null
            Server -> Browser: Response not found
            Browser -> User: Display user is not in the quiz
        end
    end
end
alt
    Server -> Server: Validate request payload
    Server -> Database: Set user_options record
    Server -> Database: Store activity record
    Server -> WebSocket: Dispatch QuizActivityEvent
    Server -> Browser: Response success
    Browser -> User: Update user option display
else quiz_session is timeout
    Server -> Browser: Response redirect to complete quiz page
    Browser -> User: Display complete quiz page
end

newpage Complete Quiz
User -> Browser: Complete quiz
Browser -> Server: Request complete quiz
Server -> Server: Answer correction and calculation
Server -> Database: Store result record
Server -> Database: Delete quiz_session record
Server -> Redis: Delete quiz_session cache record
Server -> Database: Store activity record
Server -> WebSocket: Dispatch QuizActivityEvent
Server -> Browser: Response redirect to result page
Browser -> User: Display result

@enduml
